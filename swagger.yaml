openapi: 3.0.0
info:
    title: Medical Booking API
    description: Made by - P's Get Degrees
    contact:
        name: Go to the Front End
        url: https://api-medical-booking.herokuapp.com/
    version: "1.0"
servers:
    - url: https://api-medical-booking.herokuapp.com/api/v1
      variables: {}
paths:
    /auth/register:
        post:
            tags:
                - auth
            summary: Register
            operationId: Register
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - email
                                - password
                                - role
                                - name
                                - surname
                                - gender
                                - nationality
                                - mobile
                                - address
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: user@gmail.com
                                    pattern: '^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                                password:
                                    type: string
                                    example: User1234!
                                    description: "Must have minimum eight characters, at least one upper case English letter, one lower case English letter, one number and one special character"
                                    pattern: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$"
                                role:
                                    type: string
                                    example: patient
                                    enum: [patient, doctor, admin]
                                name:
                                    type: string
                                    example: Robert
                                    minLength: 3
                                    maxLength: 50
                                    pattern: "^[A-Za-z-]+$"
                                surname:
                                    type: string
                                    example: Alexander
                                    minLength: 3
                                    maxLength: 50
                                    pattern: "^[A-Za-z-]+$"
                                gender:
                                    type: string
                                    example: other
                                    enum: [other, male, female]
                                nationality:
                                    type: string
                                    example: other
                                    enum:
                                        [
                                            "Afghan",
                                            "Albanian",
                                            "Algerian",
                                            "American",
                                            "Andorran",
                                            "Angolan",
                                            "Antiguans",
                                            "Argentinean",
                                            "Armenian",
                                            "Australian",
                                            "Austrian",
                                            "Azerbaijani",
                                            "Bahamian",
                                            "Bahraini",
                                            "Bangladeshi",
                                            "Barbadian",
                                            "Barbudans",
                                            "Batswana",
                                            "Belarusian",
                                            "Belgian",
                                            "Belizean",
                                            "Beninese",
                                            "Bhutanese",
                                            "Bolivian",
                                            "Bosnian",
                                            "Brazilian",
                                            "British",
                                            "Bruneian",
                                            "Bulgarian",
                                            "Burkinabe",
                                            "Burmese",
                                            "Burundian",
                                            "Cambodian",
                                            "Cameroonian",
                                            "Canadian",
                                            "Cape Verdean",
                                            "Central African",
                                            "Chadian",
                                            "Chilean",
                                            "Chinese",
                                            "Colombian",
                                            "Comoran",
                                            "Congolese",
                                            "Costa Rican",
                                            "Croatian",
                                            "Cuban",
                                            "Cypriot",
                                            "Czech",
                                            "Danish",
                                            "Djibouti",
                                            "Dominican",
                                            "Dutch",
                                            "East Timorese",
                                            "Ecuadorean",
                                            "Egyptian",
                                            "Emirian",
                                            "Equatorial Guinean",
                                            "Eritrean",
                                            "Estonian",
                                            "Ethiopian",
                                            "Fijian",
                                            "Filipino",
                                            "Finnish",
                                            "French",
                                            "Gabonese",
                                            "Gambian",
                                            "Georgian",
                                            "German",
                                            "Ghanaian",
                                            "Greek",
                                            "Grenadian",
                                            "Guatemalan",
                                            "Guinea-Bissauan",
                                            "Guinean",
                                            "Guyanese",
                                            "Haitian",
                                            "Herzegovinian",
                                            "Honduran",
                                            "Hungarian",
                                            "I-Kiribati",
                                            "Icelander",
                                            "Indian",
                                            "Indonesian",
                                            "Iranian",
                                            "Iraqi",
                                            "Irish",
                                            "Israeli",
                                            "Italian",
                                            "Ivorian",
                                            "Jamaican",
                                            "Japanese",
                                            "Jordanian",
                                            "Kazakhstani",
                                            "Kenyan",
                                            "Kittian and Nevisian",
                                            "Kuwaiti",
                                            "Kyrgyz",
                                            "Laotian",
                                            "Latvian",
                                            "Lebanese",
                                            "Liberian",
                                            "Libyan",
                                            "Liechtensteiner",
                                            "Lithuanian",
                                            "Luxembourger",
                                            "Macedonian",
                                            "Malagasy",
                                            "Malawian",
                                            "Malaysian",
                                            "Maldivian",
                                            "Malian",
                                            "Maltese",
                                            "Marshallese",
                                            "Mauritanian",
                                            "Mauritian",
                                            "Mexican",
                                            "Micronesian",
                                            "Moldovan",
                                            "Monacan",
                                            "Mongolian",
                                            "Moroccan",
                                            "Mosotho",
                                            "Motswana",
                                            "Mozambican",
                                            "Namibian",
                                            "Nauruan",
                                            "Nepalese",
                                            "New Zealander",
                                            "Ni-Vanuatu",
                                            "Nicaraguan",
                                            "Nigerian",
                                            "Nigerien",
                                            "North Korean",
                                            "Northern Irish",
                                            "Norwegian",
                                            "Omani",
                                            "Pakistani",
                                            "Palauan",
                                            "Panamanian",
                                            "Papua New Guinean",
                                            "Paraguayan",
                                            "Peruvian",
                                            "Polish",
                                            "Portuguese",
                                            "Qatari",
                                            "Romanian",
                                            "Russian",
                                            "Rwandan",
                                            "Saint Lucian",
                                            "Salvadoran",
                                            "Samoan",
                                            "San Marinese",
                                            "Sao Tomean",
                                            "Saudi",
                                            "Scottish",
                                            "Senegalese",
                                            "Serbian",
                                            "Seychellois",
                                            "Sierra Leonean",
                                            "Singaporean",
                                            "Slovakian",
                                            "Slovenian",
                                            "Solomon Islander",
                                            "Somali",
                                            "South African",
                                            "South Korean",
                                            "Spanish",
                                            "Sri Lankan",
                                            "Sudanese",
                                            "Surinamer",
                                            "Swazi",
                                            "Swedish",
                                            "Swiss",
                                            "Syrian",
                                            "Taiwanese",
                                            "Tajik",
                                            "Tanzanian",
                                            "Thai",
                                            "Togolese",
                                            "Tongan",
                                            "Trinidadian or Tobagonian",
                                            "Tunisian",
                                            "Turkish",
                                            "Tuvaluan",
                                            "Ugandan",
                                            "Ukrainian",
                                            "Uruguayan",
                                            "Uzbekistani",
                                            "Venezuelan",
                                            "Vietnamese",
                                            "Welsh",
                                            "Yemenite",
                                            "Zambian",
                                            "Zimbabwean",
                                        ]
                                mobile:
                                    type: string
                                    description: "Must start with 02, 04, 03, 07, 08 and have 10 digits all together"
                                    example: "0412345678"
                                    pattern: '^\({0,1}((0|\+61)(2|4|3|7|8)){0,1}\){0,1}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{1}(\ |-){0,1}[0-9]{3}$'
                                address:
                                    type: string
                                    example: "123 Testing Street, NSW 2000"
                                    minLength: 3
                                    maxLength: 100
                required: false
            responses:
                "201":
                    description: "Successfully Created User"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user:
                                        type: object
                                        properties:
                                            email:
                                                type: string
                                                example: user@gmail.com
                                            role:
                                                type: string
                                                example: patient
                                            name:
                                                type: string
                                                example: robert
                                            surname:
                                                type: string
                                                example: alexander
                                    token:
                                        type: string
                                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTc2ODJjMDFjOTZlZmM0NjE1NGIwNDkiLCJlbWFpbCI6ImRvY3RvcjFAZ21haWwuY29tIiwicm9sZSI6ImRvY3RvciIsIm5hbWUiOiJ1c2VyIiwic3VybmFtZSI6Im9uZSIsImlhdCI6MTYzNTE1NjY3MiwiZXhwIjoxNjM3NzQ4NjcyfQ.9FcHX5E5FX4s8pXppwtwTi4LyczdQV7xag5INty84Yk"
            deprecated: false
            security: []
    /auth/login:
        post:
            tags:
                - auth
            summary: Login
            operationId: Login
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - email
                                - password
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: user@gmail.com
                                password:
                                    type: string
                                    example: User1234!
                required: false
            responses:
                "200":
                    description: "Logged in Successfully"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user:
                                        type: object
                                        properties:
                                            id:
                                                type: string
                                                example: "61766b944e323ff152333ffe"
                                            email:
                                                type: string
                                                example: user@gmail.com
                                            role:
                                                type: string
                                                example: patient
                                            name:
                                                type: string
                                                example: robert
                                            surname:
                                                type: string
                                                example: alexander
                                    token:
                                        type: string
                                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTc2ODJjMDFjOTZlZmM0NjE1NGIwNDkiLCJlbWFpbCI6ImRvY3RvcjFAZ21haWwuY29tIiwicm9sZSI6ImRvY3RvciIsIm5hbWUiOiJ1c2VyIiwic3VybmFtZSI6Im9uZSIsImlhdCI6MTYzNTE1NjY3MiwiZXhwIjoxNjM3NzQ4NjcyfQ.9FcHX5E5FX4s8pXppwtwTi4LyczdQV7xag5INty84Yk"
            deprecated: false
            security: []
    /user:
        get:
            tags:
                - user
            summary: Get All Users
            operationId: GetAllUsers
            parameters:
                - name: role
                  in: query
                  required: false
                  schema:
                      type: string
                      enum: [patient, doctor, admin]
                      example: patient
                - name: name
                  in: query
                  required: false
                  schema:
                      type: string
                      pattern: "^[A-Za-z-]+$"
                - name: surname
                  in: query
                  required: false
                  schema:
                      type: string
                      pattern: "^[A-Za-z-]+$"
                - name: email
                  in: query
                  required: false
                  schema:
                      type: string
                - name: gender
                  in: query
                  required: false
                  schema:
                      type: string
                      enum: [other, male, female]
                      example: other
                - name: dateFilters
                  in: query
                  required: false
                  description: "Possible variables ( createdAt , updatedAt )  |  Supported operators ( > , >= , = , < , <= ) "
                  schema:
                      type: string
                      example: "createdAt>=1633159914979"
                - name: sort
                  in: query
                  required: false
                  description: "This will sort the returning items in either numeric or alphabetic and can be inversed by adding a ( - ) operator prefixing the field. Sort filters can be chained using the ( , ) operator"
                  schema:
                      type: string
                      example: "name,-surname"
                - name: select
                  in: query
                  required: false
                  description: "By default the query return all fields on the schema, defining a select field(s) will return on these field(s). Select filters can be chained using the ( , ) operator"
                  schema:
                      type: string
                      example: "name,surname,email,mobile"
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: "Logged in Successfully"
                    headers: {}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                _id:
                                                    type: string
                                                    example: "61766a7db8d4b12febe50d28"
                                                email:
                                                    type: string
                                                    example: "aazaan@gmail.com"
                                                password:
                                                    type: string
                                                    example: "$2a$10$rjblTeJZV9FLkR.g2GXheeIZkXwlcuM0jFhCio03sMhYWfJmAIPWG"
                                                role:
                                                    type: string
                                                    example: doctor
                                                name:
                                                    type: string
                                                    example: aazaan
                                                surname:
                                                    type: string
                                                    example: kemp
                                                gender:
                                                    type: string
                                                    example: other
                                                nationality:
                                                    type: string
                                                    example: Croatian
                                                mobile:
                                                    type: string
                                                    example: "0331432087"
                                                address:
                                                    type: string
                                                    example: "919 imagination court, south australia"
                                                createdAt:
                                                    type: string
                                                    example: "2021-10-25T08:27:41.979Z"
                                                updatedAt:
                                                    type: string
                                                    example: "2021-10-25T08:27:41.979Z"
                                                __v:
                                                    type: number
                                                    example: 0
                                    count:
                                        type: string
                                        example: "1"
            deprecated: false
    /user/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
              required: true
              description: The user ID
        get:
            tags:
                - user
            summary: Get User
            operationId: GetUser
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        patch:
            tags:
                - user
            summary: Update Users
            operationId: UpdateUser
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: user@gmail.com
                                    pattern: '^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                                password:
                                    type: string
                                    example: User1234!
                                    description: "Must have minimum eight characters, at least one upper case English letter, one lower case English letter, one number and one special character"
                                    pattern: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$"
                                name:
                                    type: string
                                    example: Robert
                                    minLength: 3
                                    maxLength: 50
                                    pattern: "^[A-Za-z-]+$"
                                surname:
                                    type: string
                                    example: Alexander
                                    minLength: 3
                                    maxLength: 50
                                    pattern: "^[A-Za-z-]+$"
                                gender:
                                    type: string
                                    example: other
                                    enum: [other, male, female]
                                mobile:
                                    type: string
                                    description: "Must start with 02, 04, 03, 07, 08 and have 10 digits all together"
                                    example: "0412345678"
                                    pattern: '^\({0,1}((0|\+61)(2|4|3|7|8)){0,1}\){0,1}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{1}(\ |-){0,1}[0-9]{3}$'
                                address:
                                    type: string
                                    example: "123 Testing Street, NSW 2000"
                                    minLength: 3
                                    maxLength: 100
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /procedure:
        get:
            tags:
                - procedure
            summary: Get All Procedures
            operationId: GetAllProcedures
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - procedure
            summary: Create Procedure
            operationId: CreateProcedure
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - procedure
                                - duration
                            type: object
                            properties:
                                procedure:
                                    type: string
                                    minLength: 3
                                    maxLength: 100
                                duration:
                                    type: integer
                                    description: "choose between 5 min - 3 hours in milliseconds, steps of 300000ms"
                                    minimum: 300000
                                    maximum: 10800000
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /procedure/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
              required: true
              description: The procedure ID
        get:
            tags:
                - procedure
            summary: Get Procedure
            operationId: GetProcedure
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        delete:
            tags:
                - procedure
            summary: Delete Procedure
            operationId: DeleteProcedure
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /department:
        get:
            tags:
                - department
            summary: Get All Departments
            operationId: GetAllDepartments
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - department
            summary: Create Department
            operationId: CreateDepartment
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - department
                            type: object
                            properties:
                                department:
                                    type: string
                                    example: "Future Medicine"
                                    minLength: 3
                                    maxLength: 100
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /department/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
              required: true
              description: The department ID
        get:
            tags:
                - department
            summary: Get Department
            operationId: GetDepartment
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        patch:
            tags:
                - department
            summary: Update Department
            operationId: UpdateDepartment
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - procedure
                                - updateType
                            type: object
                            properties:
                                procedure:
                                    type: string
                                    description: "This must be the procedure _id that you want to add to this department"
                                updateType:
                                    type: string
                                    description: "push will add to procedure in procedures array in this department / pull will remove procedure from procedures array"
                                    enum: [push, pull]
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        delete:
            tags:
                - department
            summary: Delete Department
            operationId: DeleteDepartment
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /location:
        get:
            tags:
                - location
            summary: Get All Locations
            operationId: GetAllLocations
            parameters:
                - name: room
                  in: query
                  description: "Room format must be [A-F].[1-6].[1-30]"
                  required: false
                  schema:
                      type: string
                - name: departmentId
                  in: query
                  required: false
                  schema:
                      type: string
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - location
            summary: Create Location
            operationId: CreateLocation
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - room
                                - departmentId
                            type: object
                            properties:
                                room:
                                    type: string
                                    example: "A.1.1"
                                departmentId:
                                    type: string
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /location/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
              required: true
              description: The location ID
        get:
            tags:
                - location
            summary: Get Location
            operationId: GetLocation
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        patch:
            tags:
                - location
            summary: Update Location
            operationId: UpdateLocation
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - departmentId
                            type: object
                            properties:
                                departmentId:
                                    type: string
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        delete:
            tags:
                - location
            summary: Delete Location
            operationId: DeleteLocation
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /doctor:
        get:
            tags:
                - doctor
            summary: Get All Doctors
            operationId: GetAllDoctors
            parameters:
                - name: userId
                  in: query
                  required: false
                  schema:
                      type: string
                - name: departmentId
                  in: query
                  required: false
                  schema:
                      type: string
                - name: certification
                  in: query
                  required: false
                  schema:
                      type: string
                      enum:
                          [
                              "BA of Medicine",
                              "BA of Surgery",
                              "BA of Medical Science",
                          ]
                - name: select
                  in: query
                  required: false
                  description: "By default the query return all fields on the schema, defining a select field(s) will return on these field(s). Select filters can be chained using the ( , ) operator"
                  schema:
                      type: string
                      example: certification,departmentId
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - doctor
            summary: Create Doctor
            operationId: CreateDoctor
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - departmentId
                                - certification
                            type: object
                            properties:
                                departmentId:
                                    type: string
                                certification:
                                    type: string
                                    enum:
                                        [
                                            "BA of Medicine",
                                            "BA of Surgery",
                                            "BA of Medical Science",
                                        ]
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /doctor/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
              required: true
              description: The doctor ID
        patch:
            tags:
                - doctor
            summary: Update Doctor
            operationId: UpdateDoctor
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - departmentId
                                - certification
                            type: object
                            properties:
                                departmentId:
                                    type: string
                                certification:
                                    type: string
                                    enum:
                                        [
                                            "BA of Medicine",
                                            "BA of Surgery",
                                            "BA of Medical Science",
                                        ]
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        get:
            tags:
                - doctor
            summary: Get Doctor
            operationId: GetDoctor
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /booking:
        get:
            tags:
                - booking
            summary: Get All Booking
            operationId: GetAllBooking
            parameters:
                - name: userId
                  in: query
                  schema:
                      type: string
                - name: doctorId
                  in: query
                  schema:
                      type: string
                - name: locationId
                  in: query
                  schema:
                      type: string
                - name: procedureId
                  in: query
                  schema:
                      type: string
                - name: week
                  in: query
                  description: "this is a timestamp that will indicate the range of the week and will return all bookings from sunday to saturday where the timestamp lies"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: dateFilters
                  in: query
                  required: false
                  description: "Possible variables ( bookingTime )  |  Supported operators ( > , >= , = , < , <= ) "
                  schema:
                      type: string
                      example: "bookingTime>=1633159914979"
                - name: select
                  in: query
                  required: false
                  description: "By default the query return all fields on the schema, defining a select field(s) will return on these field(s). Select filters can be chained using the ( , ) operator"
                  schema:
                      type: string
                      example: "doctorId,procedureId"
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - booking
            summary: Create Booking
            operationId: CreateBooking
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - doctorId
                                - locationId
                                - procedureId
                                - description
                                - bookingTime
                            type: object
                            properties:
                                doctorId:
                                    type: string
                                locationId:
                                    type: string
                                procedureId:
                                    type: string
                                description:
                                    type: string
                                    description: Please describe your signs and symptoms
                                    example: This is a description
                                    minLength: 3
                                    maxLength: 100
                                bookingTime:
                                    type: string
                                    description: This booking time must be a timestamp
                                    example: 1632833484405
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /booking/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
              required: true
              description: The booking ID
        get:
            tags:
                - booking
            summary: Get Booking
            operationId: GetBooking
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        patch:
            tags:
                - booking
            summary: Update Booking
            operationId: UpdateBooking
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            type: object
                            properties:
                                doctorId:
                                    type: string
                                locationId:
                                    type: string
                                procedureId:
                                    type: string
                                description:
                                    type: string
                                    description: Please describe your signs and symptoms
                                    example: This is a description
                                    minLength: 3
                                    maxLength: 100
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        delete:
            tags:
                - booking
            summary: Delete Booking
            operationId: DeleteBooking
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /diagnose:
        get:
            tags:
                - diagnose
            summary: Get All Diagnoses
            operationId: GetAllDiagnoses
            parameters:
                - name: userId
                  in: query
                  schema:
                      type: string
                - name: page
                  in: query
                  required: false
                  description: "By default the return data is segmetented depending on the limit of return and will return the first segment on the database. If the page value is 5 it will return the 5th segment of the database"
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
                - name: limit
                  in: query
                  required: false
                  description: "By default the return data is 10 items. Setting the limit field to 100 will return 100 items."
                  schema:
                      type: string
                      pattern: "^[0-9]+$"
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        post:
            tags:
                - diagnose
            summary: Create Diagnose
            operationId: CreateDiagnose
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            required:
                                - userId
                                - bookingId
                                - issue
                                - outcome
                                - recommendation
                            type: object
                            properties:
                                userId:
                                    type: string
                                bookingId:
                                    type: string
                                issue:
                                    type: string
                                    minLength: 3
                                    maxLength: 200
                                    example: Appendix Eruption
                                outcome:
                                    type: string
                                    minLength: 3
                                    maxLength: 200
                                    example: Surgical Removal of appendix
                                recommendation:
                                    type: string
                                    minLength: 3
                                    maxLength: 200
                                    example: Anasthetic and Ice the local area
                required: false
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
    /diagnose/{id}:
        parameters:
            - in: path
              name: id
              schema:
                  type: string
              required: true
              description: The diagnose ID
        get:
            tags:
                - diagnose
            summary: Get Diagnose
            operationId: GetDiagnose
            parameters: []
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
        patch:
            tags:
                - diagnose
            summary: Update Diagnose
            operationId: UpdateDiagnose
            parameters: []
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        encoding: {}
                        schema:
                            type: object
                            properties:
                                issue:
                                    type: string
                                    minLength: 3
                                    maxLength: 200
                                    example: Appendix Eruption
                                outcome:
                                    type: string
                                    minLength: 3
                                    maxLength: 200
                                    example: Surgical Removal of appendix
                                recommendation:
                                    type: string
                                    minLength: 3
                                    maxLength: 200
                                    example: Anasthetic and Ice the local area
            responses:
                "200":
                    description: ""
                    headers: {}
            deprecated: false
components:
    securitySchemes:
        httpBearer:
            type: http
            scheme: bearer
security:
    - httpBearer: []
tags:
    - name: auth
    - name: user
    - name: procedure
    - name: department
    - name: location
    - name: doctor
    - name: booking
    - name: diagnose
